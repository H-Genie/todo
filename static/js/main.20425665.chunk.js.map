{"version":3,"sources":["store/user.js","store/index.js","modules/firebase.js","styled/Globalstyle.js","styled/LogButton.js","Components/Nav/SignIn.js","Components/Nav/LogOut.js","Components/Nav/Navigator.js","Components/Todos/EditTodos/EditTodos.js","Components/Todos/SetTodo.js","Components/Todos/EditTodos/SetTodoNull.js","Components/Todos/Todos.js","Components/Todos/TodosContainer.js","App.js","index.js"],"names":["user","createSlice","name","initialState","email","uid","reducers","signIn","state","action","payload","logOut","actions","rootReducer","combineReducers","configureStore","store","createStore","composeWithDevTools","firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firebaseInstance","db","firestore","auth","GlobalStyle","createGlobalStyle","LogButton","styled","button","SignIn","signInWithGoogle","a","provider","GoogleAuthProvider","signInWithPopup","onClick","style","marginRight","width","height","LogOutButton","dispatch","useDispatch","signOut","Navigator","useSelector","Nav","LogMessage","LogOut","nav","p","React","memo","List","li","TextContainer","div","Text","span","EditTodos","useState","todos","setTodos","useEffect","collection","where","orderBy","get","then","querySnapshot","data","forEach","doc","push","handles","animation","dataSource","onUpdate","length","document","querySelector","firstElementChild","childElementCount","parent","getElementsByClassName","i","lastElementChild","id","update","dataId","row","todo","checked","color","className","text","SetTodo","Form","onSubmit","e","preventDefault","target","value","Date","now","todoObj","set","alert","Input","type","placeholder","Button","form","input","SetTodoNull","readOnly","Todos","onSnapshot","snapshot","docs","map","toggle","getElementById","classList","remove","add","overflow","contains","Icons","updatedText","prompt","updateTodo","window","confirm","delete","deleteTodo","TodosContainer","alignTodos","setAlignTodos","Main","ButtonContainer","EditButton","prev","main","label","Title","h1","Container","section","App","init","setInint","onAuthStateChanged","ReactDOM","render"],"mappings":"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","file":"static/js/main.20425665.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n    email: null,\r\n    uid: null\r\n}\r\n\r\nconst user = createSlice({\r\n    name: \"user\",\r\n    initialState,\r\n    reducers: {\r\n        signIn: (state, action) => ({\r\n            email: action.payload.email,\r\n            uid: action.payload.uid\r\n        }),\r\n        logOut: (state, action) => ({\r\n            email: action.payload.email,\r\n            uid: action.payload.uid\r\n        })\r\n    }\r\n})\r\n\r\nexport const {\r\n    signIn,\r\n    logOut\r\n} = user.actions;\r\n\r\nexport default user.reducer;","import { combineReducers, createStore } from \"redux\"\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport user from './user'\r\n\r\nconst rootReducer = combineReducers({\r\n    user\r\n})\r\n\r\nconst configureStore = () => {\r\n    const store = createStore(rootReducer, composeWithDevTools());\r\n\r\n    return { store }\r\n}\r\n\r\nexport default configureStore;","import firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\nimport 'firebase/auth';\r\n\r\nconst firebaseConfig = {\r\n    apiKey: process.env.REACT_APP_API_KEY,\r\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n    databaseURL: process.env.REACT_APP_DATABASE_URL,\r\n    projectId: process.env.REACT_APP_PROJECT_ID,\r\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n    messagingSenderId: process.env.REACT_APP_MESSAGIB_ID,\r\n    appId: process.env.REACT_APP_APP_ID,\r\n    measurementId: process.env.REACT_APP_MEASUREMENT_ID\r\n};\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport const firebaseInstance = firebase;\r\nexport const db = firebase.firestore();\r\nexport const auth = firebase.auth();","import { createGlobalStyle } from \"styled-components\";\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n    *, *::before, *::after {\r\n        box-sizing: border-box;\r\n    }\r\n\r\n    ul {\r\n        padding : 0;\r\n        margin : 0;\r\n    }\r\n\r\n    @font-face {\r\n        font-family: 'GmarketSansBold';\r\n        src: url('https://cdn.jsdelivr.net/gh/projectnoonnu/noonfonts_2001@1.1/GmarketSansBold.woff') format('woff');\r\n        font-weight: normal;\r\n        font-style: normal;\r\n    }\r\n\r\n    @font-face {\r\n        font-family: 'GmarketSansMedium';\r\n        src: url('https://cdn.jsdelivr.net/gh/projectnoonnu/noonfonts_2001@1.1/GmarketSansMedium.woff') format('woff');\r\n        font-weight: normal;\r\n        font-style: normal;\r\n    }\r\n\r\n    @font-face {\r\n        font-family: 'GmarketSansLight';\r\n        src: url('https://cdn.jsdelivr.net/gh/projectnoonnu/noonfonts_2001@1.1/GmarketSansLight.woff') format('woff');\r\n        font-weight: normal;\r\n        font-style: normal;\r\n    }\r\n\r\n    body {\r\n        font-family : GmarketSansMedium;\r\n        background-color : #f2f3f7;\r\n    }\r\n`;\r\n\r\nexport default GlobalStyle;","import styled from 'styled-components';\r\n\r\nexport const LogButton = styled.button`\r\n    min-width : 86px;\r\n    height : 40px;\r\n    display : flex;\r\n    align-items : center;\r\n    padding : 8px;\r\n    background-color : #f2f3f7;\r\n    box-shadow : -6px -6px 8px rgba(255, 255, 255, 0.9), 5px 5px 8px rgba(0, 0, 0, 0.07);\r\n    border : none;\r\n    border-radius : 8px;\r\n    font-family : GmarketSansMedium;\r\n    font-size: 10px;\r\n`;","import React from 'react';\r\nimport { auth, firebaseInstance } from '../../modules/firebase';\r\nimport { FcGoogle } from \"react-icons/fc\";\r\nimport { LogButton } from '../../styled/LogButton';\r\n\r\n\r\nconst SignIn = () => {\r\n    const signInWithGoogle = async () => {\r\n        const provider = new firebaseInstance.auth.GoogleAuthProvider();\r\n        await auth.signInWithPopup(provider);\r\n    };\r\n\r\n    return (\r\n        <LogButton onClick={signInWithGoogle}>\r\n            <FcGoogle style={{ marginRight: '5px', width: '20px', height: '20px' }} />\r\n            <span>Sign In</span>\r\n        </LogButton>\r\n    )\r\n}\r\n\r\nexport default SignIn;","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { logOut } from '../../store/user'\r\nimport { auth } from '../../modules/firebase';\r\nimport { GrLogout } from 'react-icons/gr';\r\nimport { LogButton } from '../../styled/LogButton';\r\n\r\nconst LogOutButton = () => {\r\n    const dispatch = useDispatch();\r\n    const onLogOut = () => {\r\n        auth.signOut();\r\n\r\n        dispatch(\r\n            logOut({\r\n                email: null,\r\n                uid: null\r\n            })\r\n        );\r\n    }\r\n\r\n    return (\r\n        <LogButton onClick={onLogOut}>\r\n            <GrLogout style={{ marginRight: '5px', width: '20px', height: '20px' }} />\r\n            <span>Log Out</span>\r\n        </LogButton>\r\n    )\r\n}\r\n\r\nexport default LogOutButton;","import React from 'react';\r\nimport { useSelector } from 'react-redux'\r\nimport styled from 'styled-components';\r\nimport SignIn from './SignIn';\r\nimport LogOut from './LogOut';\r\n\r\nconst Navigator = () => {\r\n    const email = useSelector(state => state.user.email);\r\n\r\n    return (\r\n        <>\r\n            {\r\n                email === null ? (\r\n                    <Nav>\r\n                        <LogMessage>로그인 해주세요</LogMessage>\r\n                        <SignIn />\r\n                    </Nav>\r\n                ) : (\r\n                    <Nav>\r\n                        <LogMessage>{email}</LogMessage>\r\n                        <LogOut />\r\n                    </Nav>\r\n                )\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nconst Nav = styled.nav`\r\n    width : calc(100% - 32px);\r\n    height : 40px;\r\n    display : flex;\r\n    justify-content : space-between;\r\n    align-items : center;\r\n    margin : 24px auto;\r\n`;\r\n\r\nconst LogMessage = styled.p`\r\n    text-overflow: ellipsis;\r\n    overflow: hidden;\r\n    white-space: nowrap;\r\n    font-family : GmarketSansLight;\r\n`;\r\n\r\nexport default React.memo(Navigator);","import React, { useState, useEffect } from \"react\";\r\nimport { useSelector } from 'react-redux';\r\nimport { db } from '../../../modules/firebase';\r\nimport { MdCheckBoxOutlineBlank, MdCheckBox } from 'react-icons/md';\r\nimport styled from 'styled-components';\r\nimport ReactDragList from 'react-drag-list';\r\n\r\nconst EditTodos = () => {\r\n    const [todos, setTodos] = useState([]);\r\n    const uid = useSelector(state => state.user.uid);\r\n\r\n    useEffect(() => {\r\n        db.collection(\"todos\").where(\"uid\", \"==\", uid).orderBy(\"dataId\").get().then(querySnapshot => {\r\n            let data = []\r\n            querySnapshot.forEach(doc => {\r\n                data.push(doc.data());\r\n            })\r\n            setTodos(data);\r\n        })\r\n    }, [uid])\r\n\r\n    const setId = () => {\r\n        const length = document.querySelector('.rc-draggable-list').firstElementChild.childElementCount;\r\n        const parent = document.getElementsByClassName('rc-draggable-list-draggableRow');\r\n\r\n        for (let i = 0; i < length; i++) {\r\n            db.doc(`todos/${parent[i].lastElementChild.firstElementChild.firstElementChild.lastElementChild.id}`).update({ dataId: i });\r\n        }\r\n    }\r\n\r\n    return (\r\n        <ReactDragList\r\n            handles={false}\r\n            animation={0}\r\n            dataSource={todos}\r\n            onUpdate={setId}\r\n            row={todo =>\r\n                <ul style={{ width: '100%' }}>\r\n                    <List key={todo.id}>\r\n                        <TextContainer>\r\n                            {todo.checked ?\r\n                                <MdCheckBox\r\n                                    style={{ color: 'rgba(6, 124, 248, 0.7)' }}\r\n                                /> :\r\n                                <MdCheckBoxOutlineBlank\r\n                                />\r\n                            }\r\n                            {todo.checked ?\r\n                                <Text\r\n                                    id={`${todo.uid}${todo.id}`}\r\n                                    className=\"checked overflow\"\r\n                                >\r\n                                    {todo.text}\r\n                                </Text> :\r\n                                <Text\r\n                                    id={`${todo.uid}${todo.id}`}\r\n                                    className=\"overflow\"\r\n                                >\r\n                                    {todo.text}\r\n                                </Text>\r\n                            }\r\n                        </TextContainer>\r\n                    </List>\r\n                </ul>\r\n            }\r\n        />\r\n    )\r\n}\r\n\r\nconst List = styled.li`\r\n    width : 100%;\r\n    display : flex;\r\n    justify-content : space-between;\r\n    border-radius : 16px;\r\n    padding : 16px;\r\n    margin : 32px 0;\r\n    background-color : #f2f3f7;\r\n    box-shadow : -6px -6px 8px rgba(255, 255, 255, 0.9), 5px 5px 8px rgba(0, 0, 0, 0.07);\r\n`;\r\n\r\nconst TextContainer = styled.div`\r\n    width: calc(100% - 32px);\r\n    display : flex;\r\n    align-items : center;\r\n\r\n    & svg {\r\n        min-width : 20px;\r\n        height : 20px;\r\n        margin-right : 10px;\r\n    }\r\n`;\r\n\r\nconst Text = styled.span`\r\n    &.overflow {\r\n        text-overflow: ellipsis;\r\n        overflow: hidden;\r\n        white-space: nowrap;\r\n    }\r\n\r\n    &.checked {\r\n        color: #abb5bd;\r\n        text-decoration: line-through;\r\n        transition : all 0.25s linear;\r\n    }\r\n`;\r\n\r\nexport default EditTodos;","import React from 'react';\r\nimport { useSelector } from 'react-redux'\r\nimport { db } from '../../modules/firebase';\r\nimport styled from 'styled-components';\r\n\r\nconst SetTodo = () => {\r\n    const uid = useSelector(state => state.user.uid);\r\n    const onSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        if (e.target[0].value === \"\") {\r\n            alert(\"모든 정보를 다 입력해주세요\");\r\n            return;\r\n        }\r\n\r\n        const id = Date.now();\r\n        const todoObj = {\r\n            id: id,\r\n            text: e.target[0].value,\r\n            uid: uid,\r\n            checked: false,\r\n            dataId: \"\"\r\n        }\r\n        db.doc(`todos/${uid}${id}`).set(todoObj);\r\n\r\n        e.target[0].value = null;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Form onSubmit={onSubmit}>\r\n                <Input type=\"text\" placeholder=\"할 일을 입력하세요\" />\r\n                <Button>+</Button>\r\n            </Form>\r\n        </>\r\n    )\r\n}\r\n\r\nconst Form = styled.form`\r\n    display : flex;\r\n    margin-bottom : 16px;\r\n`;\r\n\r\nconst Input = styled.input`\r\n    width : calc(100% - 40px);\r\n    height : 50px;\r\n    padding : 16px;\r\n    border : none;\r\n    box-shadow : inset 2px 2px 5px #babecc, inset -5px -5px 10px #fff;\r\n    border-top-left-radius : 10px;\r\n    border-bottom-left-radius : 10px;\r\n    outline : none;\r\n    font-family : GmarketSansLight;\r\n    font-size : 16px;    \r\n`;\r\n\r\nconst Button = styled.button`\r\n    width : 50px;\r\n    height : 50px;\r\n    display : flex;\r\n    justify-content : center;\r\n    align-items : center;\r\n    background-color : #067CF8;\r\n    border-top-right-radius : 10px;\r\n    border-bottom-right-radius : 10px;\r\n    border : none;\r\n    font-size : 32px;\r\n    color : #f2f3f7;\r\n\r\n    &:hover {\r\n        opacity : 0.7;\r\n        transition : opacity 0.25s linear;\r\n    }\r\n`;\r\n\r\nexport default React.memo(SetTodo);","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst SetTodoNull = () => {\r\n    return (\r\n        <>\r\n            <Form onSubmit={e => e.preventDefault()}>\r\n                <Input type=\"text\" placeholder=\"드래그 해서 순서를 변경하세요\" readOnly />\r\n            </Form>\r\n        </>\r\n    )\r\n}\r\n\r\nconst Form = styled.form`\r\n    display : flex;\r\n    margin-bottom : 16px;\r\n`;\r\n\r\nconst Input = styled.input`\r\n    width : 100%;\r\n    height : 50px;\r\n    padding : 16px 0 16px 16px;\r\n    border : 1px solid rgba(186, 190, 204, 0.5);\r\n    background-color : #f2f3f7;\r\n    border-radius : 10px;\r\n    outline : none;\r\n    font-family : GmarketSansLight;\r\n    font-size : 16px;\r\n\r\n    ::placeholder-shwon {\r\n        text-overflow: ellipsis;\r\n    }\r\n`;\r\n\r\nexport default SetTodoNull;","import React, { useState, useEffect } from \"react\";\r\nimport { useSelector } from 'react-redux';\r\nimport { db } from '../../modules/firebase';\r\nimport { MdCheckBoxOutlineBlank, MdCheckBox } from 'react-icons/md';\r\nimport { BiEditAlt, BiTrash } from \"react-icons/bi\";\r\nimport styled from 'styled-components';\r\n\r\nconst Todos = () => {\r\n    const [todos, setTodos] = useState([]);\r\n    const uid = useSelector(state => state.user.uid);\r\n\r\n    useEffect(() => {\r\n        db.collection(\"todos\").where(\"uid\", \"==\", uid).orderBy(\"dataId\").onSnapshot(snapshot => {\r\n            const data = snapshot.docs.map(doc => ({\r\n                ...doc.data()\r\n            }))\r\n            setTodos(data)\r\n        })\r\n        return () => setTodos(false);\r\n    }, [uid]);\r\n\r\n    const updateTodo = (uid, id, text) => {\r\n        const updatedText = prompt(\"메시지를 수정해주세요\", text);\r\n        if (updatedText) db.doc(`todos/${uid}${id}`).update({ text: updatedText });\r\n    }\r\n\r\n    const deleteTodo = (uid, id) => {\r\n        const ok = window.confirm(\"메시지를 삭제할까요?\");\r\n        if (ok) db.doc(`todos/${uid}${id}`).delete();\r\n    }\r\n\r\n    const toggle = (uid, id, checked) => {\r\n        checked ?\r\n            db.doc(`todos/${uid}${id}`).update({ checked: false }) :\r\n            db.doc(`todos/${uid}${id}`).update({ checked: true });\r\n\r\n        checked ?\r\n            document.getElementById(id).classList.remove('checked') :\r\n            document.getElementById(id).classList.add('checked');\r\n    }\r\n\r\n    const overflow = id => {\r\n        const contains = document.getElementById(`${id}`).classList.contains(\"overflow\");\r\n\r\n        if (contains === true) {\r\n            document.getElementById(`${id}`).classList.remove(\"overflow\");\r\n        } else {\r\n            document.getElementById(`${id}`).classList.add(\"overflow\");\r\n        }\r\n    }\r\n\r\n    return (\r\n        <ul>\r\n            {todos.map(todo =>\r\n                <List key={todo.id}>\r\n                    <TextContainer>\r\n                        {todo.checked ?\r\n                            <MdCheckBox\r\n                                onClick={() => toggle(todo.uid, todo.id, todo.checked)}\r\n                                style={{ color: 'rgba(6, 124, 248, 0.7)' }}\r\n                            /> :\r\n                            <MdCheckBoxOutlineBlank\r\n                                onClick={() => toggle(todo.uid, todo.id, todo.checked)}\r\n                            />\r\n                        }\r\n                        {todo.checked ?\r\n                            <Text\r\n                                id={todo.id}\r\n                                className=\"checked overflow\"\r\n                                onClick={() => overflow(todo.id)}\r\n                            >\r\n                                {todo.text}\r\n                            </Text> :\r\n                            <Text\r\n                                id={todo.id}\r\n                                className=\"overflow\"\r\n                                onClick={() => overflow(todo.id)}\r\n                            >\r\n                                {todo.text}\r\n                            </Text>\r\n                        }\r\n                    </TextContainer>\r\n                    <Icons>\r\n                        <BiEditAlt onClick={() => updateTodo(todo.uid, todo.id, todo.text)} />\r\n                        <BiTrash onClick={() => deleteTodo(todo.uid, todo.id)} />\r\n                    </Icons>\r\n                </List>\r\n            )}\r\n        </ul>\r\n    )\r\n}\r\n\r\nconst List = styled.li`\r\n    width : 100%;\r\n    display : flex;\r\n    justify-content : space-between;\r\n    border-radius : 16px;\r\n    padding : 16px;\r\n    margin : 32px 0;\r\n    background-color : #f2f3f7;\r\n    box-shadow : -6px -6px 8px rgba(255, 255, 255, 0.9), 5px 5px 8px rgba(0, 0, 0, 0.07);\r\n`;\r\n\r\nconst TextContainer = styled.div`\r\n    width: calc(100% - 32px);\r\n    display : flex;\r\n    align-items : center;\r\n    & svg {\r\n        min-width : 20px;\r\n        height : 20px;\r\n        margin-right : 10px;\r\n    }\r\n`;\r\n\r\nconst Text = styled.span`\r\n    &.overflow {\r\n        text-overflow: ellipsis;\r\n        overflow: hidden;\r\n        white-space: nowrap;\r\n    }\r\n    &.checked {\r\n        color: #abb5bd;\r\n        text-decoration: line-through;\r\n        transition : all 0.25s linear;\r\n    }\r\n`;\r\n\r\nconst Icons = styled.div`\r\n    min-width : 32px;\r\n    display : flex;\r\n    align-items : center;\r\n`;\r\n\r\nexport default React.memo(Todos);","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport EditTodos from './EditTodos/EditTodos';\r\nimport SetTodo from './SetTodo';\r\nimport SetTodoNull from './EditTodos/SetTodoNull';\r\nimport Todos from './Todos';\r\n\r\nconst TodosContainer = () => {\r\n    const [alignTodos, setAlignTodos] = React.useState(false);\r\n    const uid = useSelector(state => state.user.uid);\r\n\r\n    const toggleAlignTodos = () => setAlignTodos((prev => !prev));\r\n\r\n    return (\r\n        <Main>\r\n            {\r\n                uid ? (\r\n                    <>\r\n                        {alignTodos ? <SetTodoNull /> : <SetTodo />}\r\n\r\n                        <ButtonContainer>\r\n                            <p>순서 변경</p>\r\n                            <EditButton>\r\n                                <input type=\"checkbox\" onClick={toggleAlignTodos} />\r\n                                <span className=\"slider round\"></span>\r\n                            </EditButton>\r\n                        </ButtonContainer>\r\n\r\n                        {alignTodos ? <EditTodos /> : <Todos />}\r\n                    </>\r\n                ) : (\r\n                    null\r\n                )\r\n            }\r\n        </Main>\r\n    )\r\n}\r\n\r\nconst Main = styled.main`\r\n    width : calc(100% - 32px);\r\n    margin : 24px auto;\r\n`;\r\n\r\nconst ButtonContainer = styled.div`\r\n    display : flex;\r\n    justify-content : flex-end;\r\n    align-items : center;\r\n    position : sticky;\r\n    top : 0;\r\n\r\n    p {\r\n        font-size : 12px;\r\n        color : rgba(0,0,0,0.5);\r\n        margin-right : 10px;\r\n    }\r\n`;\r\n\r\nconst EditButton = styled.label`\r\n    position: relative;\r\n    display: inline-block;\r\n    width: 60px;\r\n    height: 30px;\r\n\r\n    & input {\r\n        width: 0;\r\n        height: 0;\r\n    }\r\n\r\n    .slider {\r\n        position: absolute;\r\n        cursor: pointer;\r\n        top: 0;\r\n        left: 0;\r\n        right: 0;\r\n        bottom: 0;\r\n        background-color: #ccc;\r\n        -webkit-transition: 0.4s;\r\n        transition: 0.4s;\r\n    }\r\n\r\n    .slider:before {\r\n        position: absolute;\r\n        content: \"\";\r\n        height: 26px;\r\n        width: 26px;\r\n        left: 4px;\r\n        bottom: 2px;\r\n        background-color: white;\r\n        -webkit-transition: 0.4s;\r\n        transition: 0.4s;\r\n    }\r\n\r\n    input:checked + .slider {\r\n        background-color: #067CF8;\r\n    }\r\n\r\n    input:focus + .slider {\r\n        box-shadow: 0 0 1px #067CF8;\r\n    }\r\n\r\n    input:checked + .slider:before {\r\n        -webkit-transform: translateX(26px);\r\n        -ms-transform: translateX(26px);\r\n        transform: translateX(26px);\r\n    }\r\n\r\n    .slider.round {\r\n        border-radius: 34px;\r\n    }\r\n\r\n    .slider.round:before {\r\n        border-radius: 50%;\r\n    }\r\n`;\r\n\r\nexport default React.memo(TodosContainer);","import React, { useState, useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { signIn } from './store/user'\r\nimport { auth } from './modules/firebase';\r\nimport styled from 'styled-components';\r\nimport GlobalStyle from './styled/Globalstyle';\r\nimport Navigator from './Components/Nav/Navigator';\r\nimport TodosContainer from './Components/Todos/TodosContainer';\r\n\r\nconst App = () => {\r\n    const [init, setInint] = useState(false);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        auth.onAuthStateChanged(user => {\r\n            if (user) {\r\n                dispatch(\r\n                    signIn({\r\n                        email: user.email,\r\n                        uid: user.uid\r\n                    })\r\n                );\r\n            }\r\n\r\n            setInint(true);\r\n        })\r\n    }, [dispatch]);\r\n\r\n    return (\r\n        <>\r\n            <GlobalStyle />\r\n            <Container>\r\n                <Title>To Do List</Title>\r\n                {\r\n                    init ? (\r\n                        <>\r\n                            <Navigator />\r\n                            <TodosContainer />\r\n                        </>\r\n                    ) : (\r\n                        \"Loading...\"\r\n                    )\r\n                }\r\n            </Container>\r\n        </>\r\n    )\r\n}\r\n\r\nconst Title = styled.h1`\r\n    text-align : center;\r\n    color : #067CF8;\r\n    font-size : 40px;\r\n    font-family : GmarketSansBold;\r\n`;\r\n\r\nconst Container = styled.section`\r\n    width : 100%;\r\n    max-width : 480px;\r\n    min-width : 320px;\r\n    margin : 32px auto;\r\n    background-color : #f2f3f7;\r\n    box-shadow: -2px -2px 4px 0px #ffffff, 50px 50px 50px 0px rgb(0 0 0 / 25%);\r\n    border-radius: 25px;\r\n    padding: 25px;\r\n`;\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from \"react-redux\";\r\nimport configureStore from \"./store\";\r\nimport App from './App';\r\n\r\nconst { store } = configureStore();\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}